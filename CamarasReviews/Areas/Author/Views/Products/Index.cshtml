@model CamarasReviews.Models.ProductModel
@{
    ViewData["Title"] = "Listado de Productos";
}

<!-- Encabezado de la página -->
<h1 class="mt-4">@ViewData["Title"]</h1>
<ol class="breadcrumb mb-4">
    <li class="breadcrumb-item active">@ViewData["Title"]</li>
</ol>
<!-- End Encabezado de la página -->
<!-- Botones de la página para agregar y exportar -->
<div class="row">
    <div class="col-xl-12 col-md-12 mb-4">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalAgregarProducto" id="btnAgregarProducto">
                <i class="fas fa-plus"></i>
                Agregar Producto
            </button>
        </div>
    </div>
</div>
<!-- End Botones de la página para agregar y exportar -->
<!-- Modal para agregar -->
<!-- Modal -->
<div class="modal fade" id="modalAgregarProducto" tabindex="-1" aria-labelledby="modalAgregarProductoLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <form id="fromUpsert" method="POST" enctype="multipart/form-data">
                <input type="hidden" id="productId" name="productId" asp-for="ProductId" />
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="modalAgregarProductoLabel">Agregar Producto</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label"></label>
                            <input asp-for="Name" class="form-control" id="nombreProducto" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label"></label>
                            <textarea asp-for="Description" class="form-control" id="descripcionProducto" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="mb-3">
                            <label for="featureName" class="form-label">Características</label>
                            <textarea class="form-control" id="featureName" rows="3"></textarea>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="SKU" class="form-label"></label>
                                <input asp-for="SKU" class="form-control" id="skuProducto" />
                                <span asp-validation-for="SKU" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="Price" class="form-label"></label>
                                <input type="number" asp-for="Price" class="form-control" id="precioProducto" value="0.00" />
                                <span class="text-muted">Precio en USD</span>
                                <span asp-validation-for="Price" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        @*<div class="col-6">
                        <div class="mb-3">
                        <label asp-for="Product.BrandId" class="form-label"></label>
                        @Html.DropDownListFor(model => model.Product.BrandId, Model.BrandList, "Seleccione una marca", new { @class = "form-control", @id = "marcaProducto" })
                        <span asp-validation-for="Product.BrandId" class="text-danger"></span>
                        </div>
                        </div>
                        <div class="col-6">
                        <div class="mb-3">
                        <label asp-for="Product.CategoryId" class="form-label"></label>
                        @Html.DropDownListFor(model => model.Product.CategoryId, Model.CategoryList, "Seleccione una categoría", new { @class = "form-control", @id = "categoriaProducto" })
                        <span asp-validation-for="Product.CategoryId" class="text-danger"></span>
                        </div>
                        </div>*@
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="BrandId" class="form-label"></label>
                                <select asp-for="BrandId" class="form-select" id="marcaProducto">
                                    <option value="">Seleccione una marca</option>
                                    @foreach (var brand in ViewBag.Brands)
                                    {
                                        <option value="@brand.Value">@brand.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="CategoryId" class="form-label"></label>
                                <select asp-for="CategoryId" class="form-select" id="categoriaProducto">
                                    <option value="">Seleccione una categoría</option>
                                    @foreach (var category in ViewBag.Categories)
                                    {
                                        <option value="@category.Value">@category.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    @* <div class="form-group row" id="multi-selector-uniq">
                    <div class="col-12">
                    <div class="mb-3">
                    <label asp-for="ProductImage.UrlImagen" class="form-label"></label>
                    <input type="file" asp-for="ProductImage.UrlImagen" class="form-control" id="files" multiple />
                    <span asp-validation-for="ProductImage.UrlImagen" class="text-danger"></span>
                    </div>
                    </div>
                    <div class="col-12">
                    <div class="mb-3 row" id="preview">
                    </div>
                    </div>
                    </div> *@
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnAgregarProductoModal" class="btn btn-primary">Guardar</button>
                    <button type="button" id="btnCerrarModal" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- End Modal para agregar -->
<!-- End Botones de la página para agregar y exportar -->
<!-- Contenido de la página -->
<!-- Tabla de datos -->
<div class="row">
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            @ViewData["Title"]
        </div>
        <div class="card-body">
            <table class="table table-striped table-bordered" id="tablaProducto" aria-describedby="dataTable_info" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Marca</th>
                        <th>Categoría</th>
                        <th>SKU</th>
                        <th>Precio</th>
                        <th>Fecha de creación</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>
<!-- End Tabla de datos -->
<!-- End Contenido de la página -->
<!-- Scripts de la página -->
@section Scripts {
    <script>
        $("#tablaProducto").DataTable({
            ajax: {
                url: "/Author/Products/GetAll"
            },
            columns: [
                { data: "name" },
                { data: "brand.name" },
                { data: "category.name" },
                { data: "sku" },
                { data: "price" },
                { data: "createdDate" },
                {
                    data: "productId",
                    render: function (data) {
                        return `<div class="text-center">
                                          <a href="/Author/Products/Edit/${data}" class="btn btn-success text-white" style="cursor:pointer; width:100px;">
                                             <i class="fas fa-edit"></i> Editar
                                          </a>
                                          &nbsp;
                                          <a onclick=Delete("/Author/Products/Delete/${data}") class="btn btn-danger text-white" style="cursor:pointer; width:100px;">
                                             <i class="fas fa-trash-alt"></i> Eliminar
                                          </a>
                                        </div>`;
                    }
                }
            ],
            language: {
                decimal: "",
                emptyTable: "No hay información",
                info: "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                infoEmpty: "Mostrando 0 to 0 of 0 Entradas",
                infoFiltered: "(Filtrado de _MAX_ total entradas)",
                infoPostFix: "",
                thousands: ",",
                lengthMenu: "Mostrar _MENU_ Entradas",
                loadingRecords: "Cargando...",
                processing: "Procesando...",
                search: "Buscar:",
                zeroRecords: "Sin resultados encontrados",
                paginate: {
                    first: "Primero",
                    last: "Ultimo",
                    next: "Siguiente",
                    previous: "Anterior",
                },
            },
        });
        //let filesList = [];
        //const classDragOver = "drag-over";
        //const fileInputMulti = document.querySelector("#multi-selector-uniq #files");
        //const multiSelectorUniqPreview = document.querySelector("#multi-selector-uniq #preview");
        //
        //function getIndexOfFileList(name, list) {
        //    return list.reduce(
        //        (position, file, index) => (file.name === name ? index : position),
        //        -1
        //    );
        //}
        //
        //async function encodeFileToText(file) {
        //    return file.text().then((text) => {
        //        return text;
        //    });
        //}
        //
        //async function getUniqFiles(newFiles, currentListFiles) {
        //    return new Promise((resolve) => {
        //        Promise.all(newFiles.map((inputFile) => encodeFileToText(inputFile))).then(
        //            (inputFilesText) => {
        //                Promise.all(
        //                    currentListFiles.map((savedFile) => encodeFileToText(savedFile))
        //                ).then((savedFilesText) => {
        //                    let newFileList = currentListFiles;
        //                    inputFilesText.forEach((inputFileText, index) => {
        //                        if (!savedFilesText.includes(inputFileText)) {
        //                            newFileList = newFileList.concat(newFiles[index]);
        //                        }
        //                    });
        //                    resolve(newFileList);
        //                });
        //            }
        //        );
        //    });
        //}
        //
        //unction renderPreviews(currentFileList, target, inputFile) {
        //    target.innerHTML = "";
        //    currentFileList.forEach((file, index) => {
        //        const cardContainer = document.createElement("div");
        //        cardContainer.classList.add("col-md-4", "mb-3", "d-flex", "align-items-stretch");
        //
        //        const card = document.createElement("div");
        //        card.classList.add("card");
        //
        //        const cardBody = document.createElement("div");
        //        cardBody.classList.add("card-body", "d-flex", "align-items-center", "justify-content-center");
        //
        //        const myImg = document.createElement("img");
        //        myImg.src = URL.createObjectURL(file);
        //        myImg.classList.add("card-img-top", "img-thumbnail", "w-100", "h-100");
        //        myImg.draggable = true;
        //        myImg.dataset.key = file.name;
        //        myImg.addEventListener("drop", eventDrop);
        //        myImg.addEventListener("dragover", eventDragOver);
        //
        //        const myButtonRemove = document.createElement("button");
        //        myButtonRemove.textContent = "Eliminar";
        //        myButtonRemove.classList.add("btn", "btn-danger", "mt-2");
        //        myButtonRemove.addEventListener("click", () => {
        //            filesList = deleteArrayElementByIndex(currentFileList, index);
        //            inputFile.files = arrayFilesToFileList(filesList);
        //            renderPreviews(filesList, target, inputFile);
        //        });
        //
        //        cardBody.appendChild(myImg);
        //        card.appendChild(cardBody);
        //        card.appendChild(myButtonRemove);
        //        cardContainer.appendChild(card);
        //        target.appendChild(cardContainer);
        //    });
        //}
        //
        //function deleteArrayElementByIndex(list, index) {
        //    return list.filter((item, itemIndex) => itemIndex !== index);
        //}
        //
        //function arrayFilesToFileList(filesList) {
        //    return filesList.reduce(function (dataTransfer, file) {
        //        dataTransfer.items.add(file);
        //        return dataTransfer;
        //    }, new DataTransfer()).files;
        //}
        //
        //function arraySwapIndex(firstIndex, secondIndex, list) {
        //    const tempList = list.slice();
        //    const tmpFirstPos = tempList[firstIndex];
        //    tempList[firstIndex] = tempList[secondIndex];
        //    tempList[secondIndex] = tmpFirstPos;
        //    return tempList;
        //}
        //
        //fileInputMulti.addEventListener("input", async () => {
        //    const newFilesList = Array.from(fileInputMulti.files);
        //    filesList = await getUniqFiles(newFilesList, filesList);
        //    renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);
        //    fileInputMulti.files = arrayFilesToFileList(filesList);
        //});
        //
        //let myDragElement = undefined;
        //document.addEventListener("dragstart", (event) => {
        //    myDragElement = event.target;
        //});
        //
        //function eventDragOver(event) {
        //    event.preventDefault();
        //    multiSelectorUniqPreview
        //        .querySelectorAll("li")
        //        .forEach((item) => item.classList.remove(classDragOver));
        //    event.target.classList.add(classDragOver);
        //}
        //
        //function eventDrop(event) {
        //    const myDropElement = event.target;
        //    filesList = arraySwapIndex(
        //        getIndexOfFileList(myDragElement.dataset.key, filesList),
        //        getIndexOfFileList(myDropElement.dataset.key, filesList),
        //        filesList
        //    );
        //    fileInputMulti.files = arrayFilesToFileList(filesList);
        //    renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);
        //}
        //
        $("#btnAgregarProducto").on("click", function () {
            $("#fromUpsert")[0].reset(); // Reinicia el formulario
            //filesList = []; // Reinicia la lista de archivos seleccionados
            //renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti); // Limpia las vistas previas de archivos
        });

        $("#btnAgregarProductoModal").on("click", function (event) {
            event.preventDefault();
            let productName = $("#nombreProducto").val();
            let productDescription = $("#descripcionProducto").val();
            let productPrice = $("#precioProducto").val();
            let productSKU = $("#skuProducto").val();
            let productBrandId = $("#marcaProducto").val();
            let productBrandName = $("#marcaProducto option:selected").text();
            let productCategoryId = $("#categoriaProducto").val();
            let productCategoryName = $("#categoriaProducto option:selected").text();
            let productFeature = $("#featureName").val();
            let data = new FormData();
            data.append("Name", productName);
            data.append("Description", productDescription);
            data.append("Price", productPrice);
            data.append("SKU", productSKU);
            data.append("BrandId", productBrandId);
            data.append("Brand.Name", productBrandName);
            data.append("CategoryId", productCategoryId);
            data.append("Category.Name", productCategoryName);
            data.append("Feature.Description", productFeature);
            if ($("#productId").val() == "" || $("#productId").val() == null) {
                let url = "/Author/Products/Create";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            $("#modalAgregarProducto").modal("hide");
                            $("#tablaProducto").DataTable().ajax.reload();
                            toastr.success(response.message);
                        } else {
                            toastr.error(response.message);
                        }
                    }
                });
            } else {
                let url = "/Author/Products/Create";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            $("#modalAgregarProducto").modal("hide");
                            $("#tablaProducto").DataTable().ajax.reload();
                            toastr.success(response.message);
                        } else {
                            toastr.error(response.message);
                        }
                    }
                });
            }
        });
    </script>
}
<!-- End Scripts -->