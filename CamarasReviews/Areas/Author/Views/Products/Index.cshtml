@model CamarasReviews.Models.ViewModels.ProductViewModel
@{
    ViewData["Title"] = "Listado de Productos";
}

<!-- Encabezado de la página -->
<h1 class="mt-4">@ViewData["Title"]</h1>
<ol class="breadcrumb mb-4">
    <li class="breadcrumb-item active">@ViewData["Title"]</li>
</ol>
<!-- End Encabezado de la página -->
<!-- Botones de la página para agregar y exportar -->
<div class="row">
    <div class="col-xl-12 col-md-12 mb-4">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalAgregarProducto" id="btnAgregarProducto">
                <i class="fas fa-plus"></i>
                Agregar Producto
            </button>
        </div>
    </div>
</div>
<!-- End Botones de la página para agregar y exportar -->
<!-- Modal para agregar -->
<!-- Modal Productos -->
<div class="modal fade" id="modalAgregarProducto" tabindex="-1" aria-labelledby="modalAgregarProductoLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <form id="fromUpsert" method="POST" enctype="multipart/form-data">
                <input type="hidden" id="productId" name="productId" asp-for="ProductId" />
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="modalAgregarProductoLabel">Agregar Producto</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label"></label>
                            <input asp-for="Name" class="form-control" id="nombreProducto" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label"></label>
                            <textarea asp-for="Description" class="form-control" id="descripcionProducto" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="mb-3">
                            <label asp-for="FeatureDescription" class="form-label"></label>
                            <textarea asp-for="FeatureDescription" class="form-control" id="featureName" rows="3"></textarea>
                            <span asp-validation-for="FeatureDescription" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="SKU" class="form-label"></label>
                                <input asp-for="SKU" class="form-control" id="skuProducto" />
                                <span asp-validation-for="SKU" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="Price" class="form-label"></label>
                                <input type="number" asp-for="Price" class="form-control" id="precioProducto" value="0.00" />
                                <span class="text-muted">Precio en USD</span>
                                <span asp-validation-for="Price" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="BrandId" class="form-label"></label>
                                @Html.DropDownListFor(model => model.BrandId, Model.ListOfBrands, "Seleccione una marca", new { @class = "form-control", @id = "marcaProducto" })
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="CategoryId" class="form-label"></label>
                                @Html.DropDownListFor(model => model.CategoryId, Model.ListOfCategories, "Seleccione una categoría", new { @class = "form-control", @id = "categoriaProducto" })
                            </div>
                        </div>
                    </div>
                     <div class="form-group row" id="multi-selector-uniq">
                        <div class="col-12">
                            <div class="mb-3">
                                <label asp-for="Files" class="form-label"></label>
                                <input type="file" asp-for="Files" class="form-control" id="files" multiple />
                                <span asp-validation-for="Files" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="mb-3 row" id="preview">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnAgregarProductoModal" class="btn btn-primary">Guardar</button>
                    <button type="button" id="btnCerrarModal" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- End Modal para agregar -->
<!-- Modal Imagenes -->
<div class="modal fade" id="modalImagenes" tabindex="-1" aria-labelledby="modalImagenesLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <input type="hidden" id="productIdForImages" name="productIdForImages" />
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="modalImagenesLabel">Imagenes del producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12">
                        <div class="mb-3 row" id="ProductImages">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnCerrarModal" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>
<!-- End Modal para agregar -->
<!-- End Botones de la página para agregar y exportar -->
<!-- Contenido de la página -->
<!-- Tabla de datos -->
<div class="row">
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            @ViewData["Title"]
        </div>
        <div class="card-body">
            <table class="table table-striped table-bordered" id="tablaProducto" aria-describedby="dataTable_info" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Marca</th>
                        <th>Categoría</th>
                        <th>SKU</th>
                        <th>Precio</th>
                        <th>Fecha de creación</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>
<!-- End Tabla de datos -->
<!-- End Contenido de la página -->
<!-- Scripts de la página -->
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $("#tablaProducto").DataTable({
            ajax: {
                url: "/Author/Products/GetAllActiveProducts"
            },
            columns: [
                { data: "name" },
                { data: "brand.name" },
                { data: "category.name" },
                { data: "sku", width: "10%" },
                {
                    data: "price",
                    render: $.fn.dataTable.render.number(',', '.', 2, '$')
                },
                {
                    data: "createdDate",
                    render: function (data) {
                        return moment(data).format('DD/MM/YYYY HH:mm:ss');
                    }
                },
                {
                    data: "productId",
                    render: function (data) {
                        return `
                                <div class="text-center">
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalImagenes" onclick="GetImagesProductById('${data}')">
                                        <i class="fas fa-images"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalAgregarProducto" onclick="GetProductById('/Author/Products/GetProductById/${data}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger" onclick="Delete('/Author/Products/Delete/${data}')">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                        `;
                    }
                }
            ],
            language: {
                decimal: "",
                emptyTable: "No hay información",
                info: "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                infoEmpty: "Mostrando 0 to 0 of 0 Entradas",
                infoFiltered: "(Filtrado de _MAX_ total entradas)",
                infoPostFix: "",
                thousands: ",",
                lengthMenu: "Mostrar _MENU_ Entradas",
                loadingRecords: "Cargando...",
                processing: "Procesando...",
                search: "Buscar:",
                zeroRecords: "Sin resultados encontrados",
                paginate: {
                    first: "Primero",
                    last: "Ultimo",
                    next: "Siguiente",
                    previous: "Anterior",
                },
            },
            order: [[5, "desc"]],
        });

        let filesList = [];
        const classDragOver = "drag-over";
        const fileInputMulti = document.querySelector("#multi-selector-uniq #files");
        const multiSelectorUniqPreview = document.querySelector("#multi-selector-uniq #preview");

        function getIndexOfFileList(name, list) {
            return list.reduce(
                (position, file, index) => (file.name === name ? index : position),
                -1
            );
        }

        async function encodeFileToText(file) {
            return file.text().then((text) => {
                return text;
            });
        }

        async function getUniqFiles(newFiles, currentListFiles) {
            return new Promise((resolve) => {
                Promise.all(newFiles.map((inputFile) => encodeFileToText(inputFile))).then(
                    (inputFilesText) => {
                        Promise.all(
                            currentListFiles.map((savedFile) => encodeFileToText(savedFile))
                        ).then((savedFilesText) => {
                            let newFileList = currentListFiles;
                            inputFilesText.forEach((inputFileText, index) => {
                                if (!savedFilesText.includes(inputFileText)) {
                                    newFileList = newFileList.concat(newFiles[index]);
                                }
                            });
                            resolve(newFileList);
                        });
                    }
                );
            });
        }

        function renderPreviews(currentFileList, target, inputFile) {
            target.innerHTML = "";
            currentFileList.forEach((file, index) => {
                const cardContainer = document.createElement("div");
                cardContainer.classList.add("col-md-4", "mb-3", "d-flex", "align-items-stretch");

                const card = document.createElement("div");
                card.classList.add("card");

                const cardBody = document.createElement("div");
                cardBody.classList.add("card-body", "d-flex", "align-items-center", "justify-content-center");

                const myImg = document.createElement("img");
                myImg.src = URL.createObjectURL(file);
                myImg.classList.add("card-img-top", "img-thumbnail", "w-100", "h-100");
                myImg.draggable = true;
                myImg.dataset.key = file.name;
                myImg.addEventListener("drop", eventDrop);
                myImg.addEventListener("dragover", eventDragOver);

                const myButtonRemove = document.createElement("button");
                myButtonRemove.textContent = "Eliminar";
                myButtonRemove.classList.add("btn", "btn-danger", "mt-2");
                myButtonRemove.addEventListener("click", () => {
                    filesList = deleteArrayElementByIndex(currentFileList, index);
                    inputFile.files = arrayFilesToFileList(filesList);
                    renderPreviews(filesList, target, inputFile);
                });

                cardBody.appendChild(myImg);
                card.appendChild(cardBody);
                card.appendChild(myButtonRemove);
                cardContainer.appendChild(card);
                target.appendChild(cardContainer);
            });
        }

        function deleteArrayElementByIndex(list, index) {
            return list.filter((item, itemIndex) => itemIndex !== index);
        }

        function arrayFilesToFileList(filesList) {
            return filesList.reduce(function (dataTransfer, file) {
                dataTransfer.items.add(file);
                return dataTransfer;
            }, new DataTransfer()).files;
        }

        function arraySwapIndex(firstIndex, secondIndex, list) {
            const tempList = list.slice();
            const tmpFirstPos = tempList[firstIndex];
            tempList[firstIndex] = tempList[secondIndex];
            tempList[secondIndex] = tmpFirstPos;
            return tempList;
        }

        fileInputMulti.addEventListener("input", async () => {
            const newFilesList = Array.from(fileInputMulti.files);
            filesList = await getUniqFiles(newFilesList, filesList);
            renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);
            fileInputMulti.files = arrayFilesToFileList(filesList);
        });

        let myDragElement = undefined;
        document.addEventListener("dragstart", (event) => {
            myDragElement = event.target;
        });

        function eventDragOver(event) {
            event.preventDefault();
            multiSelectorUniqPreview
                .querySelectorAll("li")
                .forEach((item) => item.classList.remove(classDragOver));
            event.target.classList.add(classDragOver);
        }

        function eventDrop(event) {
            const myDropElement = event.target;
            filesList = arraySwapIndex(
                getIndexOfFileList(myDragElement.dataset.key, filesList),
                getIndexOfFileList(myDropElement.dataset.key, filesList),
                filesList
            );
            fileInputMulti.files = arrayFilesToFileList(filesList);
            renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);
        }

        $("#btnAgregarProducto").on("click", function () {
            // cambiar el titulo del modal
            $("#modalAgregarProductoLabel").html("Agregar Producto");
            // mostrar el files input
            //$("#multi-selector-uniq").show();
            // limpiar el formulario
            $("#productId").val("");
            $("#fromUpsert")[0].reset(); // Reinicia el formulario
            filesList = []; // Reinicia la lista de archivos seleccionados
            renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti); // Limpia las vistas previas de archivos
        });

        $("#btnAgregarProductoModal").on("click", function (event) {
            event.preventDefault();
            let productName = $("#nombreProducto").val();
            let productDescription = $("#descripcionProducto").val();
            let productPrice = $("#precioProducto").val();
            let productSKU = $("#skuProducto").val();
            let productBrandId = $("#marcaProducto").val();
            let productCategoryId = $("#categoriaProducto").val();
            let productFeature = $("#featureName").val();
            let data = new FormData();
            data.append("Name", productName);
            data.append("Description", productDescription);
            data.append("Price", productPrice);
            data.append("SKU", productSKU);
            data.append("BrandId", productBrandId);
            data.append("CategoryId", productCategoryId);
            data.append("FeatureDescription", productFeature);
            if ($("#productId").val() == "" || $("#productId").val() == null) {
                let url = "/Author/Products/Create";
                let files = $("#files").get(0).files;
                for (let i = 0; i < files.length; i++) {
                    data.append("Files", files[i]);
                }
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            $("#modalAgregarProducto").modal("hide");
                            $("#tablaProducto").DataTable().ajax.reload();
                            toastr.success(response.message);
                        } else {
                            toastr.error(response.message);
                        }
                    }
                });
            } else {
                let url = "/Author/Products/Update";
                data.append("ProductId", $("#productId").val());
                let files = $("#files").get(0).files;
                for (let i = 0; i < files.length; i++) {
                    data.append("Files", files[i]);
                }
                $.ajax({
                    type: "PUT",
                    url: url,
                    data: data,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            $("#modalAgregarProducto").modal("hide");
                            $("#tablaProducto").DataTable().ajax.reload();
                            toastr.success(response.message);
                        } else {
                            toastr.error(response.message);
                        }
                    }
                });
            }
        });

        function GetProductById(url) {
            // cambiar el titulo del modal
            $("#modalAgregarProductoLabel").html("Editar Producto");
            $("#fromUpsert")[0].reset();
            filesList = []; 
            renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);
            $.ajax({
                url: url,
                type: "GET",
                dataType: "json",
                success: function (data) {
                    let product = data.data;
                    $("#productId").val(product.productId);
                    $("#nombreProducto").val(product.name);
                    $("#descripcionProducto").val(product.description);
                    $("#precioProducto").val(product.price);
                    $("#skuProducto").val(product.sku);
                    $("#marcaProducto").val(product.brandId.toUpperCase());
                    $("#categoriaProducto").val(product.categoryId.toUpperCase());
                    $("#featureName").val(product.featureDescription);
                    //$("#multi-selector-uniq").hide();
                    $("#modalAgregarProducto").modal("show");
                },
                error: function (error) {
                    console.log(error);
                },
            });
        }

        function GetImagesProductById(id){
            $("#productIdForImages").val(id);
            $.ajax({
                url: "/Author/Products/GetImagesProductById/" + id,
                type: "GET",
                dataType: "json",
                success: function (data) {
                    let imagesProduct = data.data;
                    const targetImagesProduct = document.querySelector("#ProductImages");
                    targetImagesProduct.innerHTML = "";
                    if(imagesProduct.length == 0){
                        targetImagesProduct.innerHTML += `
                        <div class="col-md-12">
                            <div class="alert alert-warning" role="alert">
                                <h4 class="alert-heading">No hay imagenes</h4>
                                <p>No hay imagenes para este producto.</p>
                            </div>
                        </div>
                        `;
                    } else {
                        imagesProduct.forEach((imagen) => {
                            targetImagesProduct.innerHTML += `
                            <div class="col-md-3">
                                <div class="card">
                                    <img src="${imagen.urlImagen}" class="card-img-top" alt="...">
                                    <div class="card-body">
                                        <button class="btn btn-danger btn-sm" onclick="DeleteImageProduct('${imagen.productImageId}')">Eliminar</button>
                                    </div>
                                </div>
                            </div>
                            `;
                        });
                    }
                },
                error: function (error) {
                    console.log(error);
                },
            });
        }

        function DeleteImageProduct(id){
            Swal.fire({
                title: "¿Estás seguro de eliminar la imagen?",
                text: "¡No podrás revertir esto!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                cancelButtonText: "Cancelar",
                confirmButtonText: "Sí, eliminar",
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/Author/Products/DeleteImageProduct/" + id,
                        type: "DELETE",
                        success: function (response) {
                            console.log(response);
                            if (response.success) {
                                GetImagesProductById($("#productIdForImages").val());
                                toastr.success(response.message);
                            } else {
                                toastr.error(response.message);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        },
                    });
                }
            });
        }

        function Delete(url) {
            Swal.fire({
                title: "¿Estás seguro de eliminar el producto?",
                text: "¡No podrás revertir esto!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                cancelButtonText: "Cancelar",
                confirmButtonText: "Sí, eliminar",
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: url,
                        type: "DELETE",
                        success: function (response) {
                            if (response.success) {
                                $("#tablaProducto").DataTable().ajax.reload();
                                toastr.success(response.message);
                            } else {
                                toastr.error(response.message);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        },
                    });
                }
            });
        }

    </script>
}
<!-- End Scripts -->